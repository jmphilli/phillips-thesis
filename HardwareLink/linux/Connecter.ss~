#lang scheme
(require "SchemeMidi.ss" 
         scheme/foreign)
(unsafe!)

#|For Mac OS X|#
(define (framework->dylib fname)
  (build-path "/System/Library/Frameworks/"(string-append fname ".framework")"Versions/Current/"fname))

#|For Mac OS X and Linux |#
(define midi-scheme-lib (ffi-lib (build-path "/Users/justinphillips/Documents/School/Thesis/Music/src/HardwareLink/reConnect/compiled/native/i386-macosx/3m/SchemeMidi_ss")))
;linux
;(define midi-scheme-lib (ffi-lib "/home/Justin/Documents/scheme/compiled/native/i386-linux/3m/SchemeMidi_ss"))

(define connect
  (get-ffi-obj 'connect midi-scheme-lib
               (_fun -> _string/utf-8)))

(define get-midi
    (get-ffi-obj 'getMidi midi-scheme-lib
                 (_fun -> _pointer)))

#;(define (midi-packet-unpacker ptr)
  (let ([data (ptr-ref ptr (_list-struct _uint64 _uint16 (_list-struct _byte _byte _byte)))])
    (list (first data) (first (third data)) (second (third data)) (third (third data)))))
(define (midi-packet-unpacker scheme-midi-ptr)
  (let ([data (ptr-ref scheme-midi-ptr (_list-struct _ulong _int
                                                     _uint
                                                     (_list-struct _byte _byte _byte)))]);gotta be a smart way to read this right TODO
    (list (first data)
          (first (fourth data)) (second (fourth data)) (third (fourth data)))))

(define (read-midi-packet)
  (midi-packet-unpacker (get-midi)))

(provide connect
         read-midi-packet)


;#|These two things, while they may be appropriate for my keyboard, do not belong here TODO|#
;;some midi commands like the command xF8 mean absolutely nothing. throw them away. *my keyboard seems to barf out xF8 all the time. this will make my life easier...
;#;(define (remove-junk-midi lst)
;  (map (lambda (x) (cond [(not (or
;                                (equal? #xF8 (second x))
;                                (equal? #xFE (second x)))) x]
;                         [else 'junk]))lst))
;
;;seems like delta time isn't used as per the spec... at least with my keyboard
;#;(define (separate-delta-time lst)
;  (map (lambda (x) (cond [(list? x) (list (first x) (rest x))])) lst))
;
;#;(define (read-midi)
;  (begin 
;    (let* ([pkt (box #f)]
;           [lst (for/list ([i (list-pkt-list-length)])
;                  (let ([new-ptr (get-midi (unbox pkt))])
;                    (begin
;                      (set-box! pkt new-ptr)
;                      (midi-packet-unpacker new-ptr))))])
;      (scheme-has-read!)
;      (separate-delta-time (remove-junk-midi lst)))))